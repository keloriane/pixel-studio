{"ast":null,"code":"import _toConsumableArray from \"C:/Users/kengi/OneDrive/Documents/pixel-studio/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _taggedTemplateLiteral from \"C:/Users/kengi/OneDrive/Documents/pixel-studio/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport _classCallCheck from \"C:/Users/kengi/OneDrive/Documents/pixel-studio/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/kengi/OneDrive/Documents/pixel-studio/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _defineProperty from \"C:/Users/kengi/OneDrive/Documents/pixel-studio/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nvar _templateObject;\n\nimport { respondMin, respondMax, respondBetween } from '../../../styles/mixins';\nimport { css } from 'styled-components';\nexport var MediaQuery;\n\n(function (MediaQuery) {\n  MediaQuery[\"Between\"] = \"between\";\n  MediaQuery[\"Max\"] = \"max\";\n  MediaQuery[\"Min\"] = \"min\";\n})(MediaQuery || (MediaQuery = {}));\n\nexport var MaxWidthMediaBuilder = /*#__PURE__*/function () {\n  function MaxWidthMediaBuilder() {\n    _classCallCheck(this, MaxWidthMediaBuilder);\n\n    _defineProperty(this, \"mediaQuery\", void 0);\n\n    _defineProperty(this, \"maxWidth\", void 0);\n\n    _defineProperty(this, \"breakPoint\", void 0);\n\n    _defineProperty(this, \"mediaValues\", void 0);\n  }\n\n  _createClass(MaxWidthMediaBuilder, [{\n    key: \"init\",\n    value: function init(maxWidthProps) {\n      // @ts-ignore\n      this.mediaQuery = Object.keys(maxWidthProps).shift();\n      this.mediaValues = maxWidthProps[this.mediaQuery];\n      this.maxWidth = this.mediaValues.shift();\n      this.breakPoint = this.mediaValues;\n      return this.getMediaQuery();\n    }\n  }, {\n    key: \"mediaQueryExist\",\n    value: function mediaQueryExist() {\n      return Object.values(MediaQuery).includes(this.mediaQuery);\n    }\n  }, {\n    key: \"getMediaQuery\",\n    value: function getMediaQuery() {\n      var innerCss = css(_templateObject || (_templateObject = _taggedTemplateLiteral([\"\\n      max-width: \", \";\\n    \"])), this.maxWidth + 'px');\n      var mediaQueryParams = [].concat(_toConsumableArray(this.breakPoint), [innerCss]);\n\n      switch (this.mediaQuery) {\n        case MediaQuery.Min:\n          // @ts-ignore\n          return respondMin.apply(void 0, _toConsumableArray(mediaQueryParams));\n\n        case MediaQuery.Max:\n          // @ts-ignore\n          return respondMax.apply(void 0, _toConsumableArray(mediaQueryParams));\n\n        case MediaQuery.Between:\n          // @ts-ignore\n          return respondBetween.apply(void 0, _toConsumableArray(mediaQueryParams));\n      }\n    }\n  }]);\n\n  return MaxWidthMediaBuilder;\n}();","map":{"version":3,"sources":["C:/Users/kengi/OneDrive/Documents/pixel-studio/src/components/common/ImageResponsive/MaxWidthMediaQueries.ts"],"names":["respondMin","respondMax","respondBetween","css","MediaQuery","MaxWidthMediaBuilder","maxWidthProps","mediaQuery","Object","keys","shift","mediaValues","maxWidth","breakPoint","getMediaQuery","values","includes","innerCss","mediaQueryParams","Min","Max","Between"],"mappings":";;;;;;;;AACA,SAASA,UAAT,EAAqBC,UAArB,EAAiCC,cAAjC,QAAuD,wBAAvD;AACA,SAASC,GAAT,QAAoB,mBAApB;AAYA,WAAYC,UAAZ;;WAAYA,U;AAAAA,EAAAA,U;AAAAA,EAAAA,U;AAAAA,EAAAA,U;GAAAA,U,KAAAA,U;;AAmBZ,WAAaC,oBAAb;AAAA;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA,WAME,cAAKC,aAAL,EAAiD;AAC/C;AACA,WAAKC,UAAL,GAAkBC,MAAM,CAACC,IAAP,CAAYH,aAAZ,EAA2BI,KAA3B,EAAlB;AACA,WAAKC,WAAL,GAAmBL,aAAa,CAAC,KAAKC,UAAN,CAAhC;AACA,WAAKK,QAAL,GAAgB,KAAKD,WAAL,CAAiBD,KAAjB,EAAhB;AACA,WAAKG,UAAL,GAAkB,KAAKF,WAAvB;AAEA,aAAO,KAAKG,aAAL,EAAP;AACD;AAdH;AAAA;AAAA,WAgBE,2BAAkB;AAChB,aAAON,MAAM,CAACO,MAAP,CAAcX,UAAd,EAA0BY,QAA1B,CAAmC,KAAKT,UAAxC,CAAP;AACD;AAlBH;AAAA;AAAA,WAoBE,yBAAgB;AACd,UAAMU,QAAQ,GAAGd,GAAH,oGACC,KAAKS,QAAL,GAAgB,IADjB,CAAd;AAGA,UAAMM,gBAAgB,gCAAO,KAAKL,UAAZ,IAAwBI,QAAxB,EAAtB;;AAEA,cAAQ,KAAKV,UAAb;AACE,aAAKH,UAAU,CAACe,GAAhB;AACE;AACA,iBAAOnB,UAAU,MAAV,4BAAckB,gBAAd,EAAP;;AACF,aAAKd,UAAU,CAACgB,GAAhB;AACE;AACA,iBAAOnB,UAAU,MAAV,4BAAciB,gBAAd,EAAP;;AACF,aAAKd,UAAU,CAACiB,OAAhB;AACE;AACA,iBAAOnB,cAAc,MAAd,4BAAkBgB,gBAAlB,EAAP;AATJ;AAWD;AArCH;;AAAA;AAAA","sourcesContent":["import { log } from 'util';\nimport { respondMin, respondMax, respondBetween } from '../../../styles/mixins';\nimport { css } from 'styled-components';\n\nexport type BetweenProps = [number, string, string];\nexport type MinOrMaxProps = [number, string];\nexport type BreakPoint = [string, string];\n\nexport interface MediaQueryAttributes {\n  between: BetweenProps;\n  min: MinOrMaxProps;\n  max: MinOrMaxProps;\n}\n\nexport enum MediaQuery {\n  Between = 'between',\n  Max = 'max',\n  Min = 'min',\n}\n\nexport type MediaQueryAttributesPartial = Partial<MediaQueryAttributes>;\nexport type MediaQueryPartial = Partial<MediaQuery>;\n\nexport interface maxWidthProps {\n  maxWidthSize: string;\n  breakPointKey: string;\n}\n\nexport interface MaxWithMediaProps {\n  maxWidth?: maxWidthProps;\n  maxWidthMediaQueries?: MediaQueryAttributesPartial[];\n}\n\nexport class MaxWidthMediaBuilder {\n  mediaQuery: MediaQueryPartial;\n  maxWidth: number | string;\n  breakPoint: BreakPoint | any;\n  mediaValues: BetweenProps | MinOrMaxProps;\n\n  init(maxWidthProps: MediaQueryAttributesPartial) {\n    // @ts-ignore\n    this.mediaQuery = Object.keys(maxWidthProps).shift();\n    this.mediaValues = maxWidthProps[this.mediaQuery];\n    this.maxWidth = this.mediaValues.shift();\n    this.breakPoint = this.mediaValues;\n\n    return this.getMediaQuery();\n  }\n\n  mediaQueryExist() {\n    return Object.values(MediaQuery).includes(this.mediaQuery);\n  }\n\n  getMediaQuery() {\n    const innerCss = css`\n      max-width: ${this.maxWidth + 'px'};\n    `;\n    const mediaQueryParams = [...this.breakPoint, innerCss];\n\n    switch (this.mediaQuery) {\n      case MediaQuery.Min:\n        // @ts-ignore\n        return respondMin(...mediaQueryParams);\n      case MediaQuery.Max:\n        // @ts-ignore\n        return respondMax(...mediaQueryParams);\n      case MediaQuery.Between:\n        // @ts-ignore\n        return respondBetween(...mediaQueryParams);\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}