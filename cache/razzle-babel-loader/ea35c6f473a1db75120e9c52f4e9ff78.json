{"ast":null,"code":"import _taggedTemplateLiteral from \"C:/Users/kengi/OneDrive/Documents/pixel-studio/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _templateObject, _templateObject2, _templateObject3;\n\nimport { css } from 'styled-components';\nimport { breakPoints } from './theme';\nexport var respondMin = function respondMin(breakPoint, innerCss) {\n  if (breakPoints[breakPoint]) {\n    var breakPointValue = breakPoints[breakPoint];\n    return css(_templateObject || (_templateObject = _taggedTemplateLiteral([\"\\n      @media (min-width: \", \") {\\n        \", \"\\n      }\\n    \"])), breakPointValue, innerCss);\n  }\n\n  throw 'error breakpoints doesnt exist';\n};\nexport var respondMax = function respondMax(breakPoint, innerCss) {\n  if (breakPoints[breakPoint]) {\n    var breakPointValue = breakPoints[breakPoint];\n    return css(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral([\"\\n      @media (max-width: \", \") {\\n        \", \"\\n      }\\n    \"])), breakPointValue, innerCss);\n  }\n\n  throw 'error breakpoints doesnt exist';\n};\nexport var respondBetween = function respondBetween(lower, upper, innerCss) {\n  var lowerBreakPoints = breakPoints[lower];\n  var upperBreakPoints = parseInt(breakPoints[upper]) - 1 + 'px';\n\n  if (breakPoints[lower] && breakPoints[upper]) {\n    return css(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral([\"\\n      @media (min-width: \", \") and (max-width: \", \") {\\n        \", \"\\n      }\\n    \"])), lowerBreakPoints, upperBreakPoints, innerCss);\n  } else if (!!breakPoints[lower]) {\n    throw 'Your lower breakpoint was invalid:' + breakPoints[lower];\n  } else if (!!breakPoints[upper]) {\n    throw 'Your upper breakpoint was invalid:' + breakPoints[upper];\n  }\n};","map":{"version":3,"sources":["C:/Users/kengi/OneDrive/Documents/pixel-studio/src/styles/mixins.ts"],"names":["css","breakPoints","respondMin","breakPoint","innerCss","breakPointValue","respondMax","respondBetween","lower","upper","lowerBreakPoints","upperBreakPoints","parseInt"],"mappings":";;;;AAAA,SAASA,GAAT,QAAoB,mBAApB;AACA,SAASC,WAAT,QAA4B,SAA5B;AAEA,OAAO,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAACC,UAAD,EAAaC,QAAb,EAA0B;AAClD,MAAIH,WAAW,CAACE,UAAD,CAAf,EAA6B;AAC3B,QAAME,eAAe,GAAGJ,WAAW,CAACE,UAAD,CAAnC;AACA,WAAOH,GAAP,qIACuBK,eADvB,EAEMD,QAFN;AAKD;;AACD,QAAM,gCAAN;AACD,CAVM;AAYP,OAAO,IAAME,UAAU,GAAG,SAAbA,UAAa,CAACH,UAAD,EAAaC,QAAb,EAA0B;AAClD,MAAIH,WAAW,CAACE,UAAD,CAAf,EAA6B;AAC3B,QAAME,eAAe,GAAGJ,WAAW,CAACE,UAAD,CAAnC;AACA,WAAOH,GAAP,uIACuBK,eADvB,EAEMD,QAFN;AAKD;;AACD,QAAM,gCAAN;AACD,CAVM;AAYP,OAAO,IAAMG,cAAc,GAAG,SAAjBA,cAAiB,CAACC,KAAD,EAAQC,KAAR,EAAeL,QAAf,EAA4B;AACxD,MAAMM,gBAAgB,GAAGT,WAAW,CAACO,KAAD,CAApC;AACA,MAAMG,gBAAgB,GAAGC,QAAQ,CAACX,WAAW,CAACQ,KAAD,CAAZ,CAAR,GAA+B,CAA/B,GAAmC,IAA5D;;AACA,MAAIR,WAAW,CAACO,KAAD,CAAX,IAAsBP,WAAW,CAACQ,KAAD,CAArC,EAA8C;AAC5C,WAAOT,GAAP,6JACuBU,gBADvB,EAC4DC,gBAD5D,EAEMP,QAFN;AAKD,GAND,MAMO,IAAI,CAAC,CAACH,WAAW,CAACO,KAAD,CAAjB,EAA0B;AAC/B,UAAM,uCAAuCP,WAAW,CAACO,KAAD,CAAxD;AACD,GAFM,MAEA,IAAI,CAAC,CAACP,WAAW,CAACQ,KAAD,CAAjB,EAA0B;AAC/B,UAAM,uCAAuCR,WAAW,CAACQ,KAAD,CAAxD;AACD;AACF,CAdM","sourcesContent":["import { css } from 'styled-components';\nimport { breakPoints } from './theme';\n\nexport const respondMin = (breakPoint, innerCss) => {\n  if (breakPoints[breakPoint]) {\n    const breakPointValue = breakPoints[breakPoint];\n    return css`\n      @media (min-width: ${breakPointValue}) {\n        ${innerCss}\n      }\n    `;\n  }\n  throw 'error breakpoints doesnt exist';\n};\n\nexport const respondMax = (breakPoint, innerCss) => {\n  if (breakPoints[breakPoint]) {\n    const breakPointValue = breakPoints[breakPoint];\n    return css`\n      @media (max-width: ${breakPointValue}) {\n        ${innerCss}\n      }\n    `;\n  }\n  throw 'error breakpoints doesnt exist';\n};\n\nexport const respondBetween = (lower, upper, innerCss) => {\n  const lowerBreakPoints = breakPoints[lower];\n  const upperBreakPoints = parseInt(breakPoints[upper]) - 1 + 'px';\n  if (breakPoints[lower] && breakPoints[upper]) {\n    return css`\n      @media (min-width: ${lowerBreakPoints}) and (max-width: ${upperBreakPoints}) {\n        ${innerCss}\n      }\n    `;\n  } else if (!!breakPoints[lower]) {\n    throw 'Your lower breakpoint was invalid:' + breakPoints[lower];\n  } else if (!!breakPoints[upper]) {\n    throw 'Your upper breakpoint was invalid:' + breakPoints[upper];\n  }\n};\n"]},"metadata":{},"sourceType":"module"}