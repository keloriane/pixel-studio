{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { respondMin, respondMax, respondBetween } from '../../../styles/mixins';\nimport { css } from 'styled-components';\nexport let MediaQuery;\n\n(function (MediaQuery) {\n  MediaQuery[\"Between\"] = \"between\";\n  MediaQuery[\"Max\"] = \"max\";\n  MediaQuery[\"Min\"] = \"min\";\n})(MediaQuery || (MediaQuery = {}));\n\nexport class MaxWidthMediaBuilder {\n  constructor() {\n    _defineProperty(this, \"mediaQuery\", void 0);\n\n    _defineProperty(this, \"maxWidth\", void 0);\n\n    _defineProperty(this, \"breakPoint\", void 0);\n\n    _defineProperty(this, \"mediaValues\", void 0);\n  }\n\n  init(maxWidthProps) {\n    // @ts-ignore\n    this.mediaQuery = Object.keys(maxWidthProps).shift();\n    this.mediaValues = maxWidthProps[this.mediaQuery];\n    this.maxWidth = this.mediaValues.shift();\n    this.breakPoint = this.mediaValues;\n    return this.getMediaQuery();\n  }\n\n  mediaQueryExist() {\n    return Object.values(MediaQuery).includes(this.mediaQuery);\n  }\n\n  getMediaQuery() {\n    const innerCss = css`\n      max-width: ${this.maxWidth + 'px'};\n    `;\n    const mediaQueryParams = [...this.breakPoint, innerCss];\n\n    switch (this.mediaQuery) {\n      case MediaQuery.Min:\n        // @ts-ignore\n        return respondMin(...mediaQueryParams);\n\n      case MediaQuery.Max:\n        // @ts-ignore\n        return respondMax(...mediaQueryParams);\n\n      case MediaQuery.Between:\n        // @ts-ignore\n        return respondBetween(...mediaQueryParams);\n    }\n  }\n\n}","map":{"version":3,"sources":["C:/Users/kengi/OneDrive/Documents/pixel-studio/src/components/common/ImageResponsive/MaxWidthMediaQueries.ts"],"names":["respondMin","respondMax","respondBetween","css","MediaQuery","MaxWidthMediaBuilder","init","maxWidthProps","mediaQuery","Object","keys","shift","mediaValues","maxWidth","breakPoint","getMediaQuery","mediaQueryExist","values","includes","innerCss","mediaQueryParams","Min","Max","Between"],"mappings":";;AACA,SAASA,UAAT,EAAqBC,UAArB,EAAiCC,cAAjC,QAAuD,wBAAvD;AACA,SAASC,GAAT,QAAoB,mBAApB;AAYA,WAAYC,UAAZ;;WAAYA,U;AAAAA,EAAAA,U;AAAAA,EAAAA,U;AAAAA,EAAAA,U;GAAAA,U,KAAAA,U;;AAmBZ,OAAO,MAAMC,oBAAN,CAA2B;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAMhCC,EAAAA,IAAI,CAACC,aAAD,EAA6C;AAC/C;AACA,SAAKC,UAAL,GAAkBC,MAAM,CAACC,IAAP,CAAYH,aAAZ,EAA2BI,KAA3B,EAAlB;AACA,SAAKC,WAAL,GAAmBL,aAAa,CAAC,KAAKC,UAAN,CAAhC;AACA,SAAKK,QAAL,GAAgB,KAAKD,WAAL,CAAiBD,KAAjB,EAAhB;AACA,SAAKG,UAAL,GAAkB,KAAKF,WAAvB;AAEA,WAAO,KAAKG,aAAL,EAAP;AACD;;AAEDC,EAAAA,eAAe,GAAG;AAChB,WAAOP,MAAM,CAACQ,MAAP,CAAcb,UAAd,EAA0Bc,QAA1B,CAAmC,KAAKV,UAAxC,CAAP;AACD;;AAEDO,EAAAA,aAAa,GAAG;AACd,UAAMI,QAAQ,GAAGhB,GAAI;AACzB,mBAAmB,KAAKU,QAAL,GAAgB,IAAK;AACxC,KAFI;AAGA,UAAMO,gBAAgB,GAAG,CAAC,GAAG,KAAKN,UAAT,EAAqBK,QAArB,CAAzB;;AAEA,YAAQ,KAAKX,UAAb;AACE,WAAKJ,UAAU,CAACiB,GAAhB;AACE;AACA,eAAOrB,UAAU,CAAC,GAAGoB,gBAAJ,CAAjB;;AACF,WAAKhB,UAAU,CAACkB,GAAhB;AACE;AACA,eAAOrB,UAAU,CAAC,GAAGmB,gBAAJ,CAAjB;;AACF,WAAKhB,UAAU,CAACmB,OAAhB;AACE;AACA,eAAOrB,cAAc,CAAC,GAAGkB,gBAAJ,CAArB;AATJ;AAWD;;AArC+B","sourcesContent":["import { log } from 'util';\nimport { respondMin, respondMax, respondBetween } from '../../../styles/mixins';\nimport { css } from 'styled-components';\n\nexport type BetweenProps = [number, string, string];\nexport type MinOrMaxProps = [number, string];\nexport type BreakPoint = [string, string];\n\nexport interface MediaQueryAttributes {\n  between: BetweenProps;\n  min: MinOrMaxProps;\n  max: MinOrMaxProps;\n}\n\nexport enum MediaQuery {\n  Between = 'between',\n  Max = 'max',\n  Min = 'min',\n}\n\nexport type MediaQueryAttributesPartial = Partial<MediaQueryAttributes>;\nexport type MediaQueryPartial = Partial<MediaQuery>;\n\nexport interface maxWidthProps {\n  maxWidthSize: string;\n  breakPointKey: string;\n}\n\nexport interface MaxWithMediaProps {\n  maxWidth?: maxWidthProps;\n  maxWidthMediaQueries?: MediaQueryAttributesPartial[];\n}\n\nexport class MaxWidthMediaBuilder {\n  mediaQuery: MediaQueryPartial;\n  maxWidth: number | string;\n  breakPoint: BreakPoint | any;\n  mediaValues: BetweenProps | MinOrMaxProps;\n\n  init(maxWidthProps: MediaQueryAttributesPartial) {\n    // @ts-ignore\n    this.mediaQuery = Object.keys(maxWidthProps).shift();\n    this.mediaValues = maxWidthProps[this.mediaQuery];\n    this.maxWidth = this.mediaValues.shift();\n    this.breakPoint = this.mediaValues;\n\n    return this.getMediaQuery();\n  }\n\n  mediaQueryExist() {\n    return Object.values(MediaQuery).includes(this.mediaQuery);\n  }\n\n  getMediaQuery() {\n    const innerCss = css`\n      max-width: ${this.maxWidth + 'px'};\n    `;\n    const mediaQueryParams = [...this.breakPoint, innerCss];\n\n    switch (this.mediaQuery) {\n      case MediaQuery.Min:\n        // @ts-ignore\n        return respondMin(...mediaQueryParams);\n      case MediaQuery.Max:\n        // @ts-ignore\n        return respondMax(...mediaQueryParams);\n      case MediaQuery.Between:\n        // @ts-ignore\n        return respondBetween(...mediaQueryParams);\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}