{"ast":null,"code":"import styled, { css } from 'styled-components';\nconst defaultFontSize = 1;\nconst defaultFontUnit = 'rem';\nconst defaultResponsiveFontUnit = 'vw';\nexport const Text = styled.span`\n  font-size: ${({\n  fontSize\n}) => {\n  switch (typeof fontSize) {\n    case 'string':\n      return fontSize;\n\n    case 'number':\n      return fontSize;\n\n    case 'string':\n      return fontSize;\n\n    case 'object':\n      return css`clamp(${fontSize.min + defaultFontUnit}, ${fontSize.vw + defaultResponsiveFontUnit}, ${fontSize.max + defaultFontUnit})`;\n\n    default:\n      return defaultFontSize + defaultFontUnit;\n  }\n}};\n\n  line-height: ${({\n  lineHeight\n}) => lineHeight ? lineHeight : 1.2};\n  font-weight: ${({\n  fontWeight\n}) => fontWeight ? fontWeight : 400};\n  background-color: ${({\n  backgroundColor\n}) => backgroundColor};\n  color: ${({\n  color\n}) => color};\n\n  ${({\n  fontFamily\n}) => fontFamily && css`\n      font-family: ${fontFamily};\n    `}\n\n  ${({\n  display\n}) => display && css`\n      display: ${display};\n    `}\n\n  ${({\n  zIndex\n}) => zIndex && css`\n      position: relative;\n      z-index: ${zIndex};\n    `}\n\n  ${({\n  stacked\n}) => stacked && css`\n      & > * {\n        display: block;\n      }\n    `}\n\n  ${({\n  debug\n}) => debug && css`\n      border: 0.5px solid red;\n      display: block;\n      background: #ffc0c0;\n\n      & > * {\n        border: 0.5px solid red;\n        display: block;\n        background: #ffc0c0;\n      }\n    `}\n\n  ${({\n  linkVisitedColor\n}) => linkVisitedColor && css`\n      & > a,\n      & > a:visited {\n        color: ${linkVisitedColor};\n      }\n    `}\n\n  ${({\n  linkHoverColor\n}) => linkHoverColor && css`\n      & > a:hover {\n        color: ${linkHoverColor};\n      }\n    `}\n\n  ${({\n  opacity\n}) => opacity && css`\n      opacity: ${opacity};\n    `}\n\n  ${({\n  fontStyle\n}) => fontStyle && css`\n      font-style: ${fontStyle};\n    `}\n\n  ${({\n  textTransform\n}) => textTransform && css`\n      text-transform: ${textTransform};\n    `}\n\n  ${({\n  textDecoration\n}) => textDecoration && css`\n      text-decoration: ${textDecoration};\n    `}\n  ${({\n  letterSpacing\n}) => letterSpacing && css`\n      letter-spacing: ${letterSpacing};\n    `}\n\n  ${({\n  textDecorationColor\n}) => textDecorationColor && css`\n      text-decoration-color: ${textDecorationColor};\n    `}\n  ${({\n  textAlign\n}) => textAlign && css`\n      text-align: ${textAlign};\n    `}\n  ${({\n  textIndent\n}) => textIndent && css`\n      text-indent: ${textIndent};\n    `}\n\n  ${({\n  maxWidth\n}) => maxWidth && css`\n      max-width: ${maxWidth + 'px'};\n    `}\n\n  ${({\n  maxLines\n}) => maxLines && css`\n      overflow: hidden;\n      text-overflow: ellipsis;\n      display: -webkit-box;\n      -webkit-line-clamp: ${maxLines};\n      -webkit-box-orient: vertical;\n    `};\n`;","map":{"version":3,"sources":["C:/Users/kengi/OneDrive/Documents/pixel-studio/src/components/common/Text/text.styles.ts"],"names":["styled","css","defaultFontSize","defaultFontUnit","defaultResponsiveFontUnit","Text","span","fontSize","min","vw","max","lineHeight","fontWeight","backgroundColor","color","fontFamily","display","zIndex","stacked","debug","linkVisitedColor","linkHoverColor","opacity","fontStyle","textTransform","textDecoration","letterSpacing","textDecorationColor","textAlign","textIndent","maxWidth","maxLines"],"mappings":"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","sourcesContent":["import styled, { css } from 'styled-components';\nimport { FontSizeOrClamp } from './index';\nimport React from 'react';\n\nconst defaultFontSize = 1;\nconst defaultFontUnit = 'rem';\nconst defaultResponsiveFontUnit = 'vw';\n\nexport interface IText {\n  as?: React.ElementType;\n  tag?: string;\n  backgroundColor?: string;\n  color?: string | React.ReactNode;\n  debug?: boolean;\n  display?: string;\n  fontFamily?: string;\n  fontSize?: FontSizeOrClamp | string;\n  fontStyle?: string;\n  fontWeight?: number;\n  lineHeight?: number | string;\n  linkHoverColor?: string;\n  linkVisitedColor?: string;\n  log?: boolean;\n  maxWidth?: number;\n  noLink?: boolean;\n  opacity?: number;\n  stacked?: boolean;\n  textTransform?: string;\n  textDecoration?: string;\n  textDecorationColor?: string;\n  variants?: any;\n  zIndex?: number;\n  children?: any | any[];\n  maxLines?: number;\n  letterSpacing?: string;\n  textAlign?: string;\n  textIndent?: string;\n\n}\n\n\nexport const Text = styled.span<IText>`\n  font-size: ${({ fontSize }) => {\n    switch (typeof fontSize) {\n      case 'string':\n        return fontSize;\n      case 'number':\n        return fontSize;\n      case 'string':\n        return fontSize;\n      case 'object':\n        return css`clamp(${fontSize.min + defaultFontUnit}, ${\n          fontSize.vw + defaultResponsiveFontUnit\n        }, ${fontSize.max + defaultFontUnit})`;\n      default:\n        return defaultFontSize + defaultFontUnit;\n    }\n  }};\n\n  line-height: ${({ lineHeight }) => (lineHeight ? lineHeight : 1.2)};\n  font-weight: ${({ fontWeight }) => (fontWeight ? fontWeight : 400)};\n  background-color: ${({ backgroundColor }) => backgroundColor};\n  color: ${({ color }) => color};\n\n  ${({ fontFamily }) =>\n    fontFamily &&\n    css`\n      font-family: ${fontFamily};\n    `}\n\n  ${({ display }) =>\n    display &&\n    css`\n      display: ${display};\n    `}\n\n  ${({ zIndex }) =>\n    zIndex &&\n    css`\n      position: relative;\n      z-index: ${zIndex};\n    `}\n\n  ${({ stacked }) =>\n    stacked &&\n    css`\n      & > * {\n        display: block;\n      }\n    `}\n\n  ${({ debug }) =>\n    debug &&\n    css`\n      border: 0.5px solid red;\n      display: block;\n      background: #ffc0c0;\n\n      & > * {\n        border: 0.5px solid red;\n        display: block;\n        background: #ffc0c0;\n      }\n    `}\n\n  ${({ linkVisitedColor }) =>\n    linkVisitedColor &&\n    css`\n      & > a,\n      & > a:visited {\n        color: ${linkVisitedColor};\n      }\n    `}\n\n  ${({ linkHoverColor }) =>\n    linkHoverColor &&\n    css`\n      & > a:hover {\n        color: ${linkHoverColor};\n      }\n    `}\n\n  ${({ opacity }) =>\n    opacity &&\n    css`\n      opacity: ${opacity};\n    `}\n\n  ${({ fontStyle }) =>\n    fontStyle &&\n    css`\n      font-style: ${fontStyle};\n    `}\n\n  ${({ textTransform }) =>\n    textTransform &&\n    css`\n      text-transform: ${textTransform};\n    `}\n\n  ${({ textDecoration }) =>\n    textDecoration &&\n    css`\n      text-decoration: ${textDecoration};\n    `}\n  ${({ letterSpacing }) =>\n    letterSpacing &&\n    css`\n      letter-spacing: ${letterSpacing};\n    `}\n\n  ${({ textDecorationColor }) =>\n    textDecorationColor &&\n    css`\n      text-decoration-color: ${textDecorationColor};\n    `}\n  ${({ textAlign }) =>\n    textAlign &&\n    css`\n      text-align: ${textAlign};\n    `}\n  ${({ textIndent }) =>\n    textIndent &&\n    css`\n      text-indent: ${textIndent};\n    `}\n\n  ${({ maxWidth }) =>\n    maxWidth &&\n    css`\n      max-width: ${maxWidth + 'px'};\n    `}\n\n  ${({ maxLines }) =>\n    maxLines &&\n    css`\n      overflow: hidden;\n      text-overflow: ellipsis;\n      display: -webkit-box;\n      -webkit-line-clamp: ${maxLines};\n      -webkit-box-orient: vertical;\n    `};\n`;\n"]},"metadata":{},"sourceType":"module"}