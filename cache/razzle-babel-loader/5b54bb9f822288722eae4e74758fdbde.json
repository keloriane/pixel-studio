{"ast":null,"code":"import _toConsumableArray from \"C:/Users/kengi/OneDrive/Documents/pixel-studio/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport * as S from './header.styles';\nimport { Sketch } from \"../../utils/header.skecth\";\nimport { useEffect, useRef } from \"react\";\nimport gsap from 'gsap';\n\nvar Header = function Header() {\n  var headerWrapper = useRef();\n  useEffect(function () {\n    var titleArray = [];\n\n    function splitText(text) {\n      var wordSplitted = text.split(' ');\n      return _toConsumableArray(wordSplitted).map(function (word) {\n        return \"<div class=\\\"chars\\\"><div class=\\\"words-inside\\\">\".concat(word, \"</div></div>\");\n      }).join(\"\");\n    }\n\n    var words = _toConsumableArray(document.querySelectorAll(\".text-letter\"));\n\n    words.map(function (word) {\n      word.innerHTML = splitText(word.textContent);\n\n      var newLetter = _toConsumableArray(word.querySelectorAll(\".chars\"));\n\n      newLetter.map(function (letter) {\n        titleArray.push(letter);\n      });\n    });\n    var wordsSplitted = document.querySelectorAll('.words-inside');\n    var headerTimeline = gsap.timeline();\n    headerTimeline.from(headerWrapper.current, {\n      duration: 1,\n      opacity: 0,\n      delay: .5\n    }).from(wordsSplitted, {\n      duration: .6,\n      y: 200,\n      stagger: 0.02,\n      opacity: 0,\n      delay: -.6\n    });\n    new Sketch();\n    window.addEventListener(\"resize\", function () {});\n  }, []);\n  return __jsx(S.Header_Wrapper, {\n    ref: headerWrapper\n  }, __jsx(S.Header_Title_Wrapper, null, __jsx(S.Header_Title, {\n    id: \"header-text-hero\",\n    className: \"text-letter\",\n    \"data-splitting\": true\n  }, \"Creating quality experiences for clients looking for\"), __jsx(S.Header_Title, {\n    className: \"red text-letter\"\n  }, \"the best solution.\")), __jsx(\"div\", {\n    className: \"sketch\"\n  }), __jsx(\"canvas\", {\n    id: \"paper\"\n  }));\n};\n\nexport default Header;","map":{"version":3,"sources":["C:/Users/kengi/OneDrive/Documents/pixel-studio/src/components/Header/index.tsx"],"names":["React","S","Sketch","useEffect","useRef","gsap","Header","headerWrapper","titleArray","splitText","text","wordSplitted","split","map","word","join","words","document","querySelectorAll","innerHTML","textContent","newLetter","letter","push","wordsSplitted","headerTimeline","timeline","from","current","duration","opacity","delay","y","stagger","window","addEventListener"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,KAAKC,CAAZ,MAAmB,iBAAnB;AACA,SAAQC,MAAR,QAAqB,2BAArB;AACA,SAAQC,SAAR,EAAmBC,MAAnB,QAA0C,OAA1C;AACA,OAAOC,IAAP,MAAiB,MAAjB;;AAIA,IAAMC,MAAM,GAAG,SAATA,MAAS,GAAM;AAEnB,MAAMC,aAAa,GAAGH,MAAM,EAA5B;AACAD,EAAAA,SAAS,CAAC,YAAK;AAEb,QAAIK,UAAU,GAAG,EAAjB;;AACA,aAASC,SAAT,CAAmBC,IAAnB,EAAyB;AACvB,UAAMC,YAAY,GAAGD,IAAI,CAACE,KAAL,CAAW,GAAX,CAArB;AACA,aAAO,mBAAID,YAAJ,EACJE,GADI,CACA,UAAAC,IAAI;AAAA,0EAAoDA,IAApD;AAAA,OADJ,EAEJC,IAFI,CAEC,EAFD,CAAP;AAGD;;AACD,QAAMC,KAAK,sBAAOC,QAAQ,CAACC,gBAAT,CAA0B,cAA1B,CAAP,CAAX;;AACAF,IAAAA,KAAK,CAACH,GAAN,CAAU,UAAAC,IAAI,EAAI;AAChBA,MAAAA,IAAI,CAACK,SAAL,GAAiBV,SAAS,CAACK,IAAI,CAACM,WAAN,CAA1B;;AACA,UAAMC,SAAS,sBAAOP,IAAI,CAACI,gBAAL,CAAsB,QAAtB,CAAP,CAAf;;AACAG,MAAAA,SAAS,CAACR,GAAV,CAAc,UAAAS,MAAM,EAAI;AACtBd,QAAAA,UAAU,CAACe,IAAX,CAAgBD,MAAhB;AACD,OAFD;AAGD,KAND;AAOA,QAAIE,aAAa,GAAGP,QAAQ,CAACC,gBAAT,CAA0B,eAA1B,CAApB;AACA,QAAMO,cAAc,GAAGpB,IAAI,CAACqB,QAAL,EAAvB;AACAD,IAAAA,cAAc,CACXE,IADH,CACQpB,aAAa,CAACqB,OADtB,EACgC;AAACC,MAAAA,QAAQ,EAAC,CAAV;AAAcC,MAAAA,OAAO,EAAC,CAAtB;AAA0BC,MAAAA,KAAK,EAAC;AAAhC,KADhC,EAEGJ,IAFH,CAEQH,aAFR,EAEwB;AAACK,MAAAA,QAAQ,EAAC,EAAV;AAAeG,MAAAA,CAAC,EAAC,GAAjB;AAAsBC,MAAAA,OAAO,EAAC,IAA9B;AAAqCH,MAAAA,OAAO,EAAC,CAA7C;AAAiDC,MAAAA,KAAK,EAAC,CAAC;AAAxD,KAFxB;AAGE,QAAI7B,MAAJ;AACAgC,IAAAA,MAAM,CAACC,gBAAP,CAAwB,QAAxB,EAAmC,YAAI,CAGxC,CAHC;AAIH,GA3BQ,EA2BP,EA3BO,CAAT;AA4BA,SACE,MAAC,CAAD,CAAG,cAAH;AAAkB,IAAA,GAAG,EAAE5B;AAAvB,KACE,MAAC,CAAD,CAAG,oBAAH,QACE,MAAC,CAAD,CAAG,YAAH;AAAgB,IAAA,EAAE,EAAE,kBAApB;AAAwC,IAAA,SAAS,EAAE,aAAnD;AAAkE;AAAlE,4DADF,EAME,MAAC,CAAD,CAAG,YAAH;AAAgB,IAAA,SAAS,EAAE;AAA3B,0BANF,CADF,EAWE;AAAK,IAAA,SAAS,EAAC;AAAf,IAXF,EAcE;AAAQ,IAAA,EAAE,EAAC;AAAX,IAdF,CADF;AAqBD,CApDD;;AAqDA,eAAeD,MAAf","sourcesContent":["import React from \"react\";\nimport * as S from './header.styles'\nimport {Sketch} from \"../../utils/header.skecth\";\nimport {useEffect, useRef, useState} from \"react\";\nimport gsap from 'gsap'\n\n\n\nconst Header = () => {\n\n  const headerWrapper = useRef()\n  useEffect(()=> {\n\n    let titleArray = [];\n    function splitText(text) {\n      const wordSplitted = text.split(' ');\n      return [...wordSplitted]\n        .map(word => `<div class=\"chars\"><div class=\"words-inside\">${word}</div></div>`)\n        .join(\"\");\n    }\n    const words = [...document.querySelectorAll(\".text-letter\")];\n    words.map(word => {\n      word.innerHTML = splitText(word.textContent);\n      const newLetter = [...word.querySelectorAll(\".chars\")];\n      newLetter.map(letter => {\n        titleArray.push(letter);\n      });\n    });\n    let wordsSplitted = document.querySelectorAll('.words-inside');\n    const headerTimeline = gsap.timeline();\n    headerTimeline\n      .from(headerWrapper.current , {duration:1 , opacity:0 , delay:.5})\n      .from(wordsSplitted , {duration:.6 , y:200 ,stagger:0.02 , opacity:0 , delay:-.6})\n      new Sketch()\n      window.addEventListener(\"resize\" , ()=>{\n\n\n    })\n  },[])\n  return (\n    <S.Header_Wrapper ref={headerWrapper}>\n      <S.Header_Title_Wrapper>\n        <S.Header_Title id={\"header-text-hero\"} className={\"text-letter\"} data-splitting>\n          Creating quality experiences for clients looking for\n\n\n        </S.Header_Title>\n        <S.Header_Title className={\"red text-letter\"}>\n          the best solution.\n        </S.Header_Title>\n      </S.Header_Title_Wrapper>\n      <div className=\"sketch\">\n\n      </div>\n      <canvas id=\"paper\">\n\n      </canvas>\n    </S.Header_Wrapper>\n\n  )\n}\nexport default Header;\n"]},"metadata":{},"sourceType":"module"}